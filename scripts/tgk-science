#!/usr/bin/env python3
# Licensed under a MIT style license - see LICENSE
import os
import sys
import argparse
import logging
import tgk
import tgk.science
from tgk.core import list_of

parser = argparse.ArgumentParser(description='41P/TGK science pipeline.')
parser.add_argument('--rlevel', type=int,
                    help=('Only use this reduction level.  Default is to'
                          ' use the most recent version of each file.'))
parser.add_argument('-n', type=int,
                    help=('Process n frames and quit.'))
parser.add_argument('--reprocess', type=list_of(str), default=[],
                    help=('Reprocess "all" data, or particular minions.'))
parser.add_argument('--continuous', action='store_true',
                    help='Continuously check local archive for new data.')
parser.add_argument('--show-config', action='store_true',
                    help='Read and print the configuration file.')
parser.add_argument('--show-defaults', action='store_true',
                    help='Print the default configuration file.')
parser.add_argument('--show-minions', action='store_true',
                    help='Show available science minions.')
parser.add_argument('-v', action='store_true', help='Increase verbosity.')

args = parser.parse_args()

if args.show_defaults:
    tgk.show_config(defaults=True)
    sys.exit()

if len(args.reprocess) > 0 and args.continuous:
    print("--reprocess and --continuous cannot be simultaneously specified.")
    sys.exit(1)

if args.n is not None and args.continuous:
    print("-n and --continuous cannot be simultaneously specified.")
    sys.exit(1)

tgk.configure()

if args.show_config:
    tgk.show_config()
    sys.exit()

if args.show_minions:
    from tgk import minions
    fm = '\n  '.join(minions.frame_minion_names)
    tm = '\n  '.join(minions.table_minion_names)
    print("""Frame minions:
  {}

Table minions:
  {}
""".format(fm, tm))
    sys.exit()

# delay import to prevent missing config file crashes
import tgk.science

try:
    science = tgk.science.Science(rlevel=args.rlevel, debug=args.v)
    if args.continuous:
        science.continuous_process()
    else:
        science.process(n=args.n, reprocess=args.reprocess)
    tgk.shutdown_logging('tgk.science')
except Exception as e:
    err = '{}: {}'.format(type(e).__name__, e)
    logging.getLogger('tgk.science').error(err)
    tgk.shutdown_logging('tgk.science')

    if args.v:
        raise(e)
    else:
        print(err)
        sys.exit(1)
